类：相同功能相同属性的对象的抽象集合，对外公开的方法需要public修饰
类 是一个定义，实例化是一个切实存在的个体
构造方法：
	在初始化实例的时候进行属性的初始化等操作，如果不编码实现，系统会默认生成空的构造方法
	用户定义了  默认构造方法就失效了
	如Cat cat = new Cat(); new后面的Cat()其实就是构造方法
析构：将构造时分配的空间进行释放
方法重载：可以在不改变原方法的基础上，新增加功能
	提供了创建同名的多个方法的能力，方法需使用不同的参数类型，出了构造方法可以重载，普通方法也可以重载
public private 都是修饰符
	public 表示它所修饰的类成员可以允许其他任何类来访问，俗称公有的，
	private 表示只允许同一个类中的成员访问，其他类包括它的子类无法访问，俗称私有的。默认是私有的
封装 每个对象都包含它能进行操作所需要的所有信息，这个特征称为封装，因此对象不必依赖其他对象来完成自己的操作
良好的封装可以减少耦合，类内部的实现可以自由修改 类具有清晰的对外接口
继承
	对象的继承是一个is-a的关系，B是A，则表明B可以继承A
	继承者还可以理解为被继承者的特殊化，除了被继承者的特征外还具有自己独特的个性
	继承定义了类如何互相关联，共享特性，继承的工作方式是，定义父类和子类，或者叫做基类和派生类，
	其中子类继承父类所有特性，子类不但继承了父类的所有特性，还可以定义新的特性
子类继承于父类，
	第一，子类拥有父类非private的属性和功能，
	第二，子类具有自己的属性和功能，即子类可以扩展父类没有的属性和功能，
	第三，子类还可以以自己的方式实现父类的功能（方法重写）
protected：对子类公开，对其他的不公开
	继承时子类可以对基类有完全访问权
继承的优点，使得所有子类公共的部分放到父类，使得代码得到了共享，避免重复，继承可使得修改或扩展继承而来的实现都较为容易
继承的缺点：父类变，子类不得不变。
继承会破坏包装，父类实现细节暴露给子类
继承是一种类与类之间强耦合关系
多态
	不同的对象可以执行相同的动作，通过对象自己的实现代码来执行
	第一，子类以父类的身份出现
	第二，子类在公众时以自己的方式实现
	第三，子类以父类的身份出现，子类特有的属性和方法不可用使用
	为了使子类的实例完全接替来自父类的类成员，父类必须将该成员声明为虚拟的，在返回值前添加virtual关键字来实现
	多态的原理是当方法被调用时，无论对象是否被转换为其父类，都只有位于对象继承链最末端的方法实现会被调用，虚方法是按照运行时类型而
	非编译时类型进行动态昂定调用的
重构
抽象类 动物就是抽象类
	抽象类不能被实例化
	抽象方法是必须被子类重写的方法
	包含抽象方法的类必须定义为抽象类
抽象类
	是一个抽象概念，提供一个继承的出发点，设计抽象类时，一定要用来继承，抽象类时树枝，具体类时叶子
接口
	
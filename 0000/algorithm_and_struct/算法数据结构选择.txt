选择数据结构
第一优选：带头结点的循环双向链表，能解决绝大多数问题，内核中链表就是使用这个链表
	相比单链表的有点，删除节点，添加节点方便。相对于非循环列表定位链尾十分容易（head->pre即尾），插入删除时间复杂度o(1)
	注意：使用时需要注意是否为空。
10亿个数中找最大/最小的数：bitmap,一个字节表示8个数，对应位0表示不存在该数，1表示存在。时间复杂度为o(n)
10亿个数中找最大/最小的N个数：大顶堆/小顶堆，节点元素不小于/不大于左右支上的任意元素。
二叉树的前序中序后序遍历：printf(前序);func(node->right);printf(中序);func(node->left);printf(后序);
队列：可以使用带头结点的循环双向链表实现，头插尾删，尾插头删。
栈：可以使用带头结点的循环双向链表实现，头插头删，尾插尾删。
实现树时最好定义结构为struct data{struct data *parent,*right,*left;};方便获取父节点，使插入，旋转等变得容易
分布式处理数据，原理是分治法
使用递归算法时，可以增加缓存来降低递归的次数，如斐波拉契数列的计算对1,2,3...等只需计算一次